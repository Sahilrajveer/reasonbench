name: Monthly reminder to maintain reasonbench

on:
  schedule:
    # Second Monday of each month at 09:00 UTC
    - cron: "0 9 8-14 * 1"
  workflow_dispatch:

jobs:
  monthly-reminder:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # 1️⃣ Fetch basic repo stats
      - name: Gather repository stats
        id: repo_stats
        run: |
          REPO="${{ github.repository }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"

          # Fetch last commit date on default branch
          LAST_COMMIT_DATE=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/commits?per_page=1" | jq -r '.[0].commit.committer.date')

          # Fetch open PR count
          OPEN_PRS=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/pulls?state=open&per_page=1" \
            -I | grep -Fi x-total-count | awk '{print $2}' | tr -d '\r')

          # Fetch open issue count
          OPEN_ISSUES=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/search/issues?q=repo:$REPO+is:issue+is:open" | jq -r '.total_count')

          # Fetch latest workflow run status (R-CMD-check.yaml)
          WORKFLOW_RUNS=$(curl -s -H "Authorization: token $TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows/R-CMD-check.yaml/runs?per_page=1")
          LAST_RUN_STATUS=$(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[0].conclusion // "unknown"')
          LAST_RUN_TIME=$(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[0].updated_at // "N/A"')

          echo "last_commit=$LAST_COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "open_prs=$OPEN_PRS" >> $GITHUB_OUTPUT
          echo "open_issues=$OPEN_ISSUES" >> $GITHUB_OUTPUT
          echo "workflow_status=$LAST_RUN_STATUS" >> $GITHUB_OUTPUT
          echo "workflow_time=$LAST_RUN_TIME" >> $GITHUB_OUTPUT

      # 2️⃣ Find existing reminder issue
      - name: Find existing reminder issue
        id: find_issue
        run: |
          ISSUE_NUMBER=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" |
            jq -r '.[] | select(.title == "📅 Monthly maintenance reminder") | .number')

          if [ -n "$ISSUE_NUMBER" ]; then
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi

      # 3️⃣ Create issue if it doesn’t exist
      - name: Create new reminder issue if none exists
        if: steps.find_issue.outputs.issue_number == ''
        id: create_issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "📅 Monthly maintenance reminder"
          content-filepath: .github/reminder-message.md
          labels: maintenance, reminder

      # 4️⃣ Add rich stats comment
      - name: Add reminder comment with stats
        run: |
          ISSUE_NUMBER="${{ steps.find_issue.outputs.issue_number || steps.create_issue.outputs.issue-number }}"

          COMMENT="👋 Hey @DiogoRibeiro7 — here’s your **monthly maintenance reminder** for \`reasonbench\` 🚀

          ## 📊 Repository Snapshot
          - 🕒 **Last commit:** ${{ steps.repo_stats.outputs.last_commit }}
          - 🧩 **Open PRs:** ${{ steps.repo_stats.outputs.open_prs }}
          - 🐞 **Open issues:** ${{ steps.repo_stats.outputs.open_issues }}
          - ✅ **R CMD check status:** ${{ steps.repo_stats.outputs.workflow_status }} (last run ${{ steps.repo_stats.outputs.workflow_time }})

          ## 🔧 Suggested Actions
          - Re-run \`devtools::check()\` and review results  
          - Update vignettes and documentation  
          - Review [ROADMAP.md](https://github.com/DiogoRibeiro7/reasonbench/blob/main/ROADMAP.md) for progress  
          - Close stale issues and merge pending PRs  

          _Triggered automatically on $(date -u '+%Y-%m-%d %H:%M UTC')._"

          COMMENT_ESCAPED=$(echo "$COMMENT" | jq -Rs .)
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": $COMMENT_ESCAPED}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments"
